from rsf.proj import *
import wplot, pplot

from random import random

import numpy as np
np.random.seed(2024)

VERB      = False # verbose mode
PLOT      = True #    plot mode

AMPLITUDE = True  # add amplitude variation
CURVATURE = True  # add curvature

# ------------------------------------------------------------
# global parameters

# grab params from sutil  
sutil_par = {'nt':3920, 'dt':0.0892857}

# look for nearest power of 2
p2 = 1
while p2 < sutil_par['nt'] :
    p2 = p2*2

par = dict(nt=sutil_par['nt'],  ot=+0.0,     dt=sutil_par['dt'],     lt='t',   ut='us',
           nx=512,              ox=-1000.0,  dx=4.00,                lx='x',   ux='.',
           verb='y'
        )
par['fPeak']  = 4.0 # [MHz] wavelet peak frequency
par['fBand']  = 1.0 # [MHz] wavelet frequency band

wplot.param(par)
wplot.dgrey2d_init(250.0,par)
par['dheight2d'] = 11
par['labelattr'] += ' labelsz=5 labelfat=2 '

# ------------------------------------------------------------
# ------------------------------------------------------------
nr =  64 # number of realizations
nc =   3 # number of carriers
nk = [int(1+10*random()) for r in range(nr)]
total = sum(nk)

# time
tcen = par['ot'] + (par['nt']-1)/2 * par['dt']
tsig =             (par['nt']-1)/8 * par['dt']
tx = np.random.normal( tcen, tsig, total)
if VERB: print(tx)

# slope
pcen = 0.000
psig = 0.002
px = np.random.normal( pcen, psig, total)
if VERB: print(px)

# amplitude
if AMPLITUDE:
    acen = 0.00
    asig = 1.0e-3
    ax = np.random.normal( acen, asig, total)
else:
    ax = np.ones(total)
if VERB: print(ax)

# curvature amplitude
if CURVATURE:
    wcen = 0.00
    wsig = 0.25
    wx = np.random.normal( wcen, wsig, total)
else:
    wx = np.zeros(total)
if VERB: print(wx)

# curvature frequency
if CURVATURE:
    fcen = 0.0
    fsig = 1.0e-3
    fx = np.random.normal( fcen, fsig, total)
else:
    fx = np.zeros(total)
if VERB: print(fx)

# ------------------------------------------------------------
# ------------------------------------------------------------
# make data

# first generate a sample wavelet to convolve the noise with
fPeak = par['fPeak'] / np.power(2,0)
tx_wav = 2.5
nt_wav = 5/par['dt']
Flow('wav',None,
                '''  
                math n1=%d o1=%g d1=%g label1=%s unit1=%s
                output="cos( 2 * (%g)   * (%g)   * (x1 - (%g))  ) *
                        exp(-2 * (%g)^2 * (%g)^2 * (x1 - (%g))^2)"
                '''%(nt_wav,par['ot'],par['dt'],par['lt'],par['ut'],
                        np.pi, fPeak,          tx_wav,
                        np.pi, par['fBand']/4, tx_wav,
                    ) 
                )

for jr in range(nr): # loop over realizations
    rtag = "-r%03d"%jr

    for k in range(nk[jr]):

        prev = sum(nk[:jr]) + k

        amp = 2*random()

        comptag = "%d"%k

        for ic in range(nc): # loop over carriers
            ctag = "%d"%ic

            fPeak = par['fPeak'] / np.power(2,ic)

            Flow('comp'+comptag+ctag+rtag,None,
                '''  
                math n1=%d o1=%g d1=%g label1=%s unit1=%s
                    n2=%d o2=%g d2=%g label2=%s unit2=%s
                output="cos( 2 * (%g)   * (%g)   * (x1 - (%g) + (%g) * x2 + (%g)*cos(2*(%g) * x2*(%g)) )  ) *
                        exp(-2 * (%g)^2 * (%g)^2 * (x1 - (%g) + (%g) * x2 + (%g)*cos(2*(%g) * x2*(%g)) )^2) * 
                        (1.0 + 0.5 * cos(2*(%g) * x2*(%g)))" | 
                scale dscale=%g |
                pad end1=%d end2=%d
                '''%( par['nt'],par['ot'],par['dt'],par['lt'],par['ut'],
                        par['nx'],par['ox'],par['dx'],par['lx'],par['ux'],
                        np.pi, fPeak,          tx[prev], px[prev], wx[prev], np.pi, fx[prev],
                        np.pi, par['fBand']/4, tx[prev], px[prev], wx[prev], np.pi, fx[prev],
                        np.pi, ax[prev], 
                        amp,
                        p2-par['nt'], 0
                    ) 
                )
            
    c0 = ' '.join(['comp'+f'{k}'+ '0' + rtag + '.rsf' for k in range(nk[jr])])
    c1 = ' '.join(['comp'+f'{k}'+ '1' + rtag + '.rsf' for k in range(nk[jr])])
    c2 = ' '.join(['comp'+f'{k}'+ '2' + rtag + '.rsf' for k in range(nk[jr])])
    carrier_strings = (c0, c1, c2)

    f0 = 'dat'+'0'+rtag
    f1 = 'dat'+'1'+rtag
    f2 = 'dat'+'2'+rtag
    final_strings = (f0, f1, f2)

    # generate noise to add on
    seed, rng, var = jr*3, 0.05, 0.1,
    ints = (0, 1, 2)
    for c in ints:
        Flow('noise'+str(c)+rtag, c0,
            f"""
            noise seed={seed+c} range={rng} var={var} rep=y | conv filt=wav.rsf trans=y | scale dscale=0.1 | window f1={int(nt_wav/2)} n1={p2}
            """)

    for c, f, i in zip(carrier_strings, final_strings, ints): 
        Flow(f, None, f'add {c} noise{i}{rtag}.rsf')

# ------------------------------------------------------------
# ------------------------------------------------------------
# concatenate data

for ic in range(nc): # loop over carriers
    ctag = "%d"%ic

    Flow('dat'+ctag,['dat'+ctag+"-r%03d"%jr for jr in range(nr)],
        'cat axis=3 space=n ${SOURCES[1:%d]}'%nr)
    
    Flow('byt'+ctag,'dat'+ctag,'byte gainpanel=a pclip=100')

# ------------------------------------------------------------
# ------------------------------------------------------------
# plot data

if PLOT:
    for jr in range(nr): # loop over realizations
        rtag = "-r%03d"%jr

        for ic in range(nc): # loop over carriers
            ctag = "%d"%ic

            if ic == 0: Plot('dat'+ctag+rtag,'byt'+ctag,
                                'window n3=1 f3=%d |'%jr + 
                                wplot.dgrey2d('grid=y',par))
            else:       Plot('dat'+ctag+rtag,'byt'+ctag,
                                'window n3=1 f3=%d |'%jr + 
                                wplot.dgrey2d('wantaxis=n',par))

        pplot.multip('dat'+rtag,['dat0'+rtag,'dat1'+rtag,'dat2'+rtag],1,3, 1.0,1.0, 0.0,-3.75)
        Result('dat'+rtag,'dat'+rtag,'Overlay')

End()
